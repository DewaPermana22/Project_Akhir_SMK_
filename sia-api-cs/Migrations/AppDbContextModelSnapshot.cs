// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sia_api_cs.Models;

#nullable disable

namespace sia_api_cs.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("sia_api_cs.Models.Beritum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Gambar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("gambar");

                    b.Property<string>("Isi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isi");

                    b.Property<string>("Judul")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("judul");

                    b.Property<long?>("KategoriId")
                        .HasColumnType("bigint")
                        .HasColumnName("kategori_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("views")
                        .HasDefaultValueSql("'0'::bigint");

                    b.HasKey("Id")
                        .HasName("berita_pkey");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Slug" }, "berita_slug_unique")
                        .IsUnique();

                    b.ToTable("berita");
                });

            modelBuilder.Entity("sia_api_cs.Models.Cache", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<int>("Expiration")
                        .HasColumnType("integer")
                        .HasColumnName("expiration");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("cache_pkey");

                    b.ToTable("cache");
                });

            modelBuilder.Entity("sia_api_cs.Models.CacheLock", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("key");

                    b.Property<int>("Expiration")
                        .HasColumnType("integer")
                        .HasColumnName("expiration");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("owner");

                    b.HasKey("Key")
                        .HasName("cache_locks_pkey");

                    b.ToTable("cache_locks");
                });

            modelBuilder.Entity("sia_api_cs.Models.FailedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("failed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("failed_jobs_pkey");

                    b.HasIndex(new[] { "Uuid" }, "failed_jobs_uuid_unique")
                        .IsUnique();

                    b.ToTable("failed_jobs");
                });

            modelBuilder.Entity("sia_api_cs.Models.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("Attempts")
                        .HasColumnType("smallint")
                        .HasColumnName("attempts");

                    b.Property<int>("AvailableAt")
                        .HasColumnType("integer")
                        .HasColumnName("available_at");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer")
                        .HasColumnName("created_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("queue");

                    b.Property<int?>("ReservedAt")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_at");

                    b.HasKey("Id")
                        .HasName("jobs_pkey");

                    b.HasIndex(new[] { "Queue" }, "jobs_queue_index");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("sia_api_cs.Models.JobBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<int?>("CancelledAt")
                        .HasColumnType("integer")
                        .HasColumnName("cancelled_at");

                    b.Property<int>("CreatedAt")
                        .HasColumnType("integer")
                        .HasColumnName("created_at");

                    b.Property<string>("FailedJobIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_job_ids");

                    b.Property<int>("FailedJobs")
                        .HasColumnType("integer")
                        .HasColumnName("failed_jobs");

                    b.Property<int?>("FinishedAt")
                        .HasColumnType("integer")
                        .HasColumnName("finished_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<int>("PendingJobs")
                        .HasColumnType("integer")
                        .HasColumnName("pending_jobs");

                    b.Property<int>("TotalJobs")
                        .HasColumnType("integer")
                        .HasColumnName("total_jobs");

                    b.HasKey("Id")
                        .HasName("job_batches_pkey");

                    b.ToTable("job_batches");
                });

            modelBuilder.Entity("sia_api_cs.Models.KategoriBeritum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Kategori")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("kategori");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("kategori_berita_pkey");

                    b.ToTable("kategori_berita");
                });

            modelBuilder.Entity("sia_api_cs.Models.KategoriPengumuman", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nama")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nama");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("kategori_pengumuman_pkey");

                    b.ToTable("kategori_pengumuman");
                });

            modelBuilder.Entity("sia_api_cs.Models.Kela", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NamaKelas")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nama_kelas");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("kelas_pkey");

                    b.ToTable("kelas");
                });

            modelBuilder.Entity("sia_api_cs.Models.KelasGuru", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("GuruId")
                        .HasColumnType("bigint")
                        .HasColumnName("guru_id");

                    b.Property<long>("KelasId")
                        .HasColumnType("bigint")
                        .HasColumnName("kelas_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("kelas_guru_pkey");

                    b.HasIndex("GuruId");

                    b.HasIndex("KelasId");

                    b.ToTable("kelas_guru");
                });

            modelBuilder.Entity("sia_api_cs.Models.KelasSiswa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("KelasId")
                        .HasColumnType("bigint")
                        .HasColumnName("kelas_id");

                    b.Property<long>("SiswaId")
                        .HasColumnType("bigint")
                        .HasColumnName("siswa_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("kelas_siswa_pkey");

                    b.HasIndex("KelasId");

                    b.HasIndex("SiswaId");

                    b.ToTable("kelas_siswa");
                });

            modelBuilder.Entity("sia_api_cs.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Batch")
                        .HasColumnType("integer")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id")
                        .HasName("migrations_pkey");

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("sia_api_cs.Models.PasswordResetToken", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.HasKey("Email")
                        .HasName("password_reset_tokens_pkey");

                    b.ToTable("password_reset_tokens");
                });

            modelBuilder.Entity("sia_api_cs.Models.Pengumuman", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IsiPengumuman")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isi_pengumuman");

                    b.Property<string>("JudulPengumuman")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("judul_pengumuman");

                    b.Property<long>("KategoriId")
                        .HasColumnType("bigint")
                        .HasColumnName("kategori_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pengumuman_pkey");

                    b.HasIndex("KategoriId");

                    b.HasIndex("UserId");

                    b.ToTable("pengumuman");
                });

            modelBuilder.Entity("sia_api_cs.Models.PengumumanKela", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("KelasId")
                        .HasColumnType("bigint")
                        .HasColumnName("kelas_id");

                    b.Property<long>("PengumumanId")
                        .HasColumnType("bigint")
                        .HasColumnName("pengumuman_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pengumuman_kelas_pkey");

                    b.HasIndex("KelasId");

                    b.HasIndex("PengumumanId");

                    b.ToTable("pengumuman_kelas");
                });

            modelBuilder.Entity("sia_api_cs.Models.PersonalAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abilities")
                        .HasColumnType("text")
                        .HasColumnName("abilities");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("last_used_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("token");

                    b.Property<long>("TokenableId")
                        .HasColumnType("bigint")
                        .HasColumnName("tokenable_id");

                    b.Property<string>("TokenableType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tokenable_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("personal_access_tokens_pkey");

                    b.HasIndex(new[] { "ExpiresAt" }, "personal_access_tokens_expires_at_index");

                    b.HasIndex(new[] { "Token" }, "personal_access_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "TokenableType", "TokenableId" }, "personal_access_tokens_tokenable_type_tokenable_id_index");

                    b.ToTable("personal_access_tokens");
                });

            modelBuilder.Entity("sia_api_cs.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("sia_api_cs.Models.RoleUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("role_user_pkey");

                    b.ToTable("role_user");
                });

            modelBuilder.Entity("sia_api_cs.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<int>("LastActivity")
                        .HasColumnType("integer")
                        .HasColumnName("last_activity");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("sessions_pkey");

                    b.HasIndex(new[] { "LastActivity" }, "sessions_last_activity_index");

                    b.HasIndex(new[] { "UserId" }, "sessions_user_id_index");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("sia_api_cs.Models.StatusUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("status_user_pkey");

                    b.ToTable("status_user");
                });

            modelBuilder.Entity("sia_api_cs.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("remember_token");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("sia_api_cs.Models.Beritum", b =>
                {
                    b.HasOne("sia_api_cs.Models.KategoriBeritum", "Kategori")
                        .WithMany("Berita")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("berita_kategori_id_foreign");

                    b.HasOne("sia_api_cs.Models.User", "User")
                        .WithMany("Berita")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("berita_user_id_foreign");

                    b.Navigation("Kategori");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sia_api_cs.Models.KelasGuru", b =>
                {
                    b.HasOne("sia_api_cs.Models.User", "Guru")
                        .WithMany("KelasGurus")
                        .HasForeignKey("GuruId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("kelas_guru_guru_id_foreign");

                    b.HasOne("sia_api_cs.Models.Kela", "Kelas")
                        .WithMany("KelasGurus")
                        .HasForeignKey("KelasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("kelas_guru_kelas_id_foreign");

                    b.Navigation("Guru");

                    b.Navigation("Kelas");
                });

            modelBuilder.Entity("sia_api_cs.Models.KelasSiswa", b =>
                {
                    b.HasOne("sia_api_cs.Models.Kela", "Kelas")
                        .WithMany("KelasSiswas")
                        .HasForeignKey("KelasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("kelas_siswa_kelas_id_foreign");

                    b.HasOne("sia_api_cs.Models.User", "Siswa")
                        .WithMany("KelasSiswas")
                        .HasForeignKey("SiswaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("kelas_siswa_siswa_id_foreign");

                    b.Navigation("Kelas");

                    b.Navigation("Siswa");
                });

            modelBuilder.Entity("sia_api_cs.Models.Pengumuman", b =>
                {
                    b.HasOne("sia_api_cs.Models.KategoriPengumuman", "Kategori")
                        .WithMany("Pengumumen")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pengumuman_kategori_id_foreign");

                    b.HasOne("sia_api_cs.Models.User", "User")
                        .WithMany("Pengumumen")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pengumuman_user_id_foreign");

                    b.Navigation("Kategori");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sia_api_cs.Models.PengumumanKela", b =>
                {
                    b.HasOne("sia_api_cs.Models.Kela", "Kelas")
                        .WithMany("PengumumanKelas")
                        .HasForeignKey("KelasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pengumuman_kelas_kelas_id_foreign");

                    b.HasOne("sia_api_cs.Models.Pengumuman", "Pengumuman")
                        .WithMany("PengumumanKelas")
                        .HasForeignKey("PengumumanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pengumuman_kelas_pengumuman_id_foreign");

                    b.Navigation("Kelas");

                    b.Navigation("Pengumuman");
                });

            modelBuilder.Entity("sia_api_cs.Models.RefreshToken", b =>
                {
                    b.HasOne("sia_api_cs.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sia_api_cs.Models.User", b =>
                {
                    b.HasOne("sia_api_cs.Models.RoleUser", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_role_id_foreign");

                    b.HasOne("sia_api_cs.Models.StatusUser", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_status_id_foreign");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("sia_api_cs.Models.KategoriBeritum", b =>
                {
                    b.Navigation("Berita");
                });

            modelBuilder.Entity("sia_api_cs.Models.KategoriPengumuman", b =>
                {
                    b.Navigation("Pengumumen");
                });

            modelBuilder.Entity("sia_api_cs.Models.Kela", b =>
                {
                    b.Navigation("KelasGurus");

                    b.Navigation("KelasSiswas");

                    b.Navigation("PengumumanKelas");
                });

            modelBuilder.Entity("sia_api_cs.Models.Pengumuman", b =>
                {
                    b.Navigation("PengumumanKelas");
                });

            modelBuilder.Entity("sia_api_cs.Models.RoleUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("sia_api_cs.Models.StatusUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("sia_api_cs.Models.User", b =>
                {
                    b.Navigation("Berita");

                    b.Navigation("KelasGurus");

                    b.Navigation("KelasSiswas");

                    b.Navigation("Pengumumen");
                });
#pragma warning restore 612, 618
        }
    }
}
